name: Release Management

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_tag:
        description: 'Prerelease tag (alpha, beta, rc)'
        required: false
        default: 'beta'

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release-pr:
    name: Create Release PR
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      pr_number: ${{ steps.pr.outputs.pr_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate new version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          if [[ "${{ github.event.inputs.release_type }}" == "prerelease" ]]; then
            NEW_VERSION=$(npm version prerelease --preid=${{ github.event.inputs.prerelease_tag }} --no-git-tag-version)
          else
            NEW_VERSION=$(npm version ${{ github.event.inputs.release_type }} --no-git-tag-version)
          fi
          
          NEW_VERSION=${NEW_VERSION#v} # Remove 'v' prefix if present
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update Tauri version
        run: |
          # Update Cargo.toml version
          sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.new_version }}"/' src-tauri/Cargo.toml
          
          # Update tauri.conf.json version
          node -e "
            const fs = require('fs');
            const config = JSON.parse(fs.readFileSync('src-tauri/tauri.conf.json', 'utf8'));
            config.package.version = '${{ steps.version.outputs.new_version }}';
            fs.writeFileSync('src-tauri/tauri.conf.json', JSON.stringify(config, null, 2));
          "

      - name: Update Python version
        run: |
          # Update backend version
          sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.new_version }}"/' backend/pyproject.toml

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog using conventional commits
          npx conventional-changelog-cli -p angular -i CHANGELOG.md -s -r 0
          
          # Extract latest changes for PR description
          LATEST_CHANGES=$(awk '/^## \[/{if(++n==2) exit} n>=1' CHANGELOG.md | head -n -1)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$LATEST_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          BRANCH_NAME="release/v${{ steps.version.outputs.new_version }}"
          git checkout -b "$BRANCH_NAME"
          git add .
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git push origin "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create Pull Request
        id: pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "Release v${{ steps.version.outputs.new_version }}"
          body: |
            ## Release v${{ steps.version.outputs.new_version }}
            
            This PR prepares the release of version ${{ steps.version.outputs.new_version }}.
            
            ### Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### Checklist
            - [ ] Version numbers updated in all files
            - [ ] Changelog updated
            - [ ] Tests passing
            - [ ] Documentation updated
            - [ ] Ready for release
            
            **Note**: Merging this PR will trigger the release workflow.
          labels: |
            release
            automated
          reviewers: |
            # Add your team members here
          assignees: |
            # Add assignees here

  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: create-release-pr
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: release/v${{ needs.create-release-pr.outputs.new_version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Validate version consistency
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAURI_VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")
          CARGO_VERSION=$(grep '^version = ' src-tauri/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          
          echo "Package.json version: $PACKAGE_VERSION"
          echo "Tauri config version: $TAURI_VERSION"
          echo "Cargo.toml version: $CARGO_VERSION"
          
          if [[ "$PACKAGE_VERSION" != "$TAURI_VERSION" ]] || [[ "$PACKAGE_VERSION" != "$CARGO_VERSION" ]]; then
            echo "Version mismatch detected!"
            exit 1
          fi
          
          echo "All versions are consistent: $PACKAGE_VERSION"

      - name: Comment on PR
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ needs.create-release-pr.outputs.pr_number }}
          body: |
            âœ… **Release validation passed**
            
            - All tests passing
            - Build successful
            - Version consistency verified
            
            This release is ready to be merged and deployed.