var m={};const u={CreateFile:{type:"object",properties:{intent:{type:"string",const:"CreateFile"},confidence:{type:"number",minimum:0,maximum:1},parameters:{type:"object",properties:{title:{type:"string",minLength:1,maxLength:255},path:{type:"string",pattern:'^[^<>:"|?*\\x00-\\x1f]*$'},content:{type:"string"}},required:["title"],additionalProperties:!1}},required:["intent","confidence","parameters"]},OpenItem:{type:"object",properties:{intent:{type:"string",const:"OpenItem"},confidence:{type:"number",minimum:0,maximum:1},parameters:{type:"object",properties:{query:{type:"string",minLength:1,maxLength:500},type:{type:"string",enum:["file","application","folder","auto"]}},required:["query"],additionalProperties:!1}},required:["intent","confidence","parameters"]},AnalyzeSpreadsheet:{type:"object",properties:{intent:{type:"string",const:"AnalyzeSpreadsheet"},confidence:{type:"number",minimum:0,maximum:1},parameters:{type:"object",properties:{path:{type:"string",pattern:"\\.(csv|xlsx|xls|ods)$"},op:{type:"string",enum:["sum","avg","count","total"]},column:{type:"string",minLength:1,maxLength:100}},required:["path","op","column"],additionalProperties:!1}},required:["intent","confidence","parameters"]},SummarizeDoc:{type:"object",properties:{intent:{type:"string",const:"SummarizeDoc"},confidence:{type:"number",minimum:0,maximum:1},parameters:{type:"object",properties:{path:{type:"string",pattern:"\\.pdf$"},length:{type:"string",enum:["short","bullets","tweet"]}},required:["path","length"],additionalProperties:!1}},required:["intent","confidence","parameters"]}},d=[{name:"create_file",description:"Create a new file with optional content",parameters:{type:"object",properties:{title:{type:"string",description:"Name of the file to create (with extension)"},path:{type:"string",description:"Optional directory path where file should be created"},content:{type:"string",description:"Optional initial content for the file"},confidence:{type:"number",description:"Confidence score from 0.0 to 1.0"}},required:["title","confidence"]}},{name:"open_item",description:"Open a file, application, or folder",parameters:{type:"object",properties:{query:{type:"string",description:"Search query for the item to open (file name, app name, etc.)"},type:{type:"string",enum:["file","application","folder","auto"],description:"Type of item to open - auto will attempt to determine type"},confidence:{type:"number",description:"Confidence score from 0.0 to 1.0"}},required:["query","confidence"]}},{name:"analyze_spreadsheet",description:"Perform analysis operations on spreadsheet data",parameters:{type:"object",properties:{path:{type:"string",description:"Path to the spreadsheet file (CSV, XLSX, XLS, ODS)"},op:{type:"string",enum:["sum","avg","count","total"],description:"Operation to perform on the data"},column:{type:"string",description:"Column name or identifier to analyze"},confidence:{type:"number",description:"Confidence score from 0.0 to 1.0"}},required:["path","op","column","confidence"]}},{name:"summarize_document",description:"Summarize a PDF document",parameters:{type:"object",properties:{path:{type:"string",description:"Path to the PDF document to summarize"},length:{type:"string",enum:["short","bullets","tweet"],description:"Desired summary format and length"},confidence:{type:"number",description:"Confidence score from 0.0 to 1.0"}},required:["path","length","confidence"]}}];class l{apiKey;sessionId;constructor(r,e="default"){this.apiKey=r,this.sessionId=e}async parseIntent(r){try{const e=await this.callGPT4o(r);if(!e.choices?.[0]?.message?.function_call)return this.createParseError(r,"INTENT_PARSE_FAILED","No valid intent could be determined from the input");const t=e.choices[0].message.function_call,n=this.processFunctionCall(t,r),i=this.validateIntent(n);return i!==!0?i:n}catch(e){return console.error("Intent parsing error:",e),this.createParseError(r,"INTENT_PARSE_FAILED",`Failed to parse intent: ${e instanceof Error?e.message:"Unknown error"}`)}}async callGPT4o(r){const e=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4o",messages:[{role:"system",content:`You are an intent parser for a desktop assistant. Parse user commands into structured intents.
            
Available intents:
- create_file: Create new files with optional content
- open_item: Open files, applications, or folders
- analyze_spreadsheet: Perform calculations on spreadsheet data
- summarize_document: Summarize PDF documents

Always provide a confidence score between 0.0 and 1.0. Use function calling to return structured data.
If the intent is unclear or ambiguous, use a lower confidence score.`},{role:"user",content:r}],functions:d,function_call:"auto",temperature:.1,max_tokens:500})});if(!e.ok)throw new Error(`OpenAI API error: ${e.status} ${e.statusText}`);return await e.json()}processFunctionCall(r,e){const{name:t,arguments:n}=r,i=JSON.parse(n),s={create_file:"CreateFile",open_item:"OpenItem",analyze_spreadsheet:"AnalyzeSpreadsheet",summarize_document:"SummarizeDoc"}[t];if(!s)throw new Error(`Unknown function: ${t}`);const{confidence:p,...c}=i;return{intent:s,confidence:p||.5,parameters:c,context:{sessionId:this.sessionId,timestamp:new Date().toISOString(),userInput:e}}}validateIntent(r){const e=u[r.intent];if(!e)return this.createParseError(r.context?.userInput||"","UNSUPPORTED_OPERATION",`Unsupported intent: ${r.intent}`);if(r.confidence<.7)return this.createParseError(r.context?.userInput||"","LOW_CONFIDENCE","Intent confidence is too low, please be more specific",r.confidence);const t=this.validateAgainstSchema(r,e);return t.length>0?this.createValidationError(r.context?.userInput||"",t):!0}validateAgainstSchema(r,e){const t=[];if(e.properties?.parameters?.required)for(const n of e.properties.parameters.required)n in r.parameters||t.push({field:n,value:void 0,reason:"Required parameter is missing"});if(e.properties?.parameters?.properties)for(const[n,i]of Object.entries(e.properties.parameters.properties)){const a=r.parameters[n];if(a!==void 0){const s=this.validateField(n,a,i);s&&t.push(s)}}return t}validateField(r,e,t){if(t.type&&typeof e!==t.type)return{field:r,value:e,reason:`Expected ${t.type}, got ${typeof e}`};if(t.type==="string"){if(t.minLength&&e.length<t.minLength)return{field:r,value:e,reason:`Minimum length is ${t.minLength}`};if(t.maxLength&&e.length>t.maxLength)return{field:r,value:e,reason:`Maximum length is ${t.maxLength}`};if(t.pattern&&!new RegExp(t.pattern).test(e))return{field:r,value:e,reason:"Value does not match required pattern"};if(t.enum&&!t.enum.includes(e))return{field:r,value:e,reason:`Value must be one of: ${t.enum.join(", ")}`}}if(t.type==="number"){if(t.minimum!==void 0&&e<t.minimum)return{field:r,value:e,reason:`Minimum value is ${t.minimum}`};if(t.maximum!==void 0&&e>t.maximum)return{field:r,value:e,reason:`Maximum value is ${t.maximum}`}}return null}createParseError(r,e,t,n){const i=this.generateSuggestions(e,r);return{error:{code:e,message:t,details:{userInput:r,confidence:n}},suggestions:i,context:{sessionId:this.sessionId,timestamp:new Date().toISOString(),userInput:r}}}createValidationError(r,e){const t=e.filter(i=>i.value===void 0).map(i=>i.field),n=e.filter(i=>i.value!==void 0);return{error:{code:t.length>0?"MISSING_PARAMETERS":"INVALID_PARAMETERS",message:t.length>0?"Required parameters are missing":"One or more parameters are invalid",details:{userInput:r,missingFields:t.length>0?t:void 0,invalidFields:n.length>0?n:void 0}},suggestions:this.generateValidationSuggestions(e),context:{sessionId:this.sessionId,timestamp:new Date().toISOString(),userInput:r}}}generateSuggestions(r,e){switch(r){case"INTENT_PARSE_FAILED":return[{type:"rephrase",message:"Please be more specific about what you'd like me to do",example:'Try saying "Create a file called notes.txt" or "Open the budget spreadsheet"'},{type:"example",message:"Here are some things I can help with:",example:`• Create and edit files
• Analyze spreadsheet data
• Summarize PDF documents
• Open files and applications`}];case"LOW_CONFIDENCE":return[{type:"clarify",message:"I'm not sure what you want me to do. Could you be more specific?",example:"Try adding more details about the file, operation, or location"}];case"AMBIGUOUS_INTENT":return[{type:"clarify",message:"Your request could mean several things. Please clarify:",example:"Are you trying to create, open, or analyze something?"}];default:return[{type:"rephrase",message:"Please try rephrasing your request",example:"Be more specific about what you want to do"}]}}generateValidationSuggestions(r){const e=[];for(const t of r)t.field==="title"&&t.reason.includes("pattern")?e.push({type:"rephrase",message:'File names cannot contain these characters: < > : " | ? *',example:'Try "Create file called report.txt" instead'}):t.field==="path"&&t.reason.includes("pattern")?e.push({type:"rephrase",message:"Please specify a valid file path",example:'Use "./documents/file.csv" or just "file.csv"'}):t.value===void 0&&e.push({type:"clarify",message:`Please specify the ${t.field}`,example:`Add information about the ${t.field} you want to use`});return e.length===0&&e.push({type:"rephrase",message:"Please check your input and try again",example:"Make sure all required information is provided"}),e}}const f=(o,r)=>new l(o,r),y=async(o,r)=>{const e=r||m.REACT_APP_OPENAI_API_KEY;if(!e)throw new Error("OpenAI API key is required for intent parsing");return await f(e).parseIntent(o)};export{f as createIntentParser,y as parseIntent};
